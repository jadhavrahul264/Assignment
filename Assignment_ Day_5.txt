prn no:063 Dac
Name : Rahul_Jadhav



//1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?



package day5_1;



class base{
	
      
	base(int k){
		
		System.out.println("inside base param cons");
	}
}

class sub1 extends base{
	
	  sub1()
	  {
		super(10);  
	        System.out.println("inside sub1 cons");
	      }

        
       sub1(int k){
         super(20);
         System.out.println("inside sub1 param cons");
               }
}

class sub2 extends sub1{
	
	sub2()
	{
     super(7);
	System.out.println("inside sub2 cons");
	}
    }



public class Demo {

	public static void main(String[] args) {
 
		  sub1 s= new sub2();
                   sub2 s= new sub2();
		 
		
	}

}



..........................................................

//2>create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?



package day5_1;

 class Vehicle {
	 
	 public void start() {
		 
		System.out.println("inside vehicle start"); 
		 
	 }
	 
	 
 }
 class Fourwheeler extends Vehicle{
	 
	 
  public void start() {
		 
		 System.out.println("inside fourwheeler start");
		 
		 
	 }
	 
 }





public class Demo {

	public static void main(String[] args) {
//		
//		Vehicle v1= new Fourwheeler(); //  by using upcasting// late binding
//		v1.start();
       
		   Vehicle v2= new Vehicle();  // using default late binding
		   v2.start();
		 
		 
	}

}
.....................................................................................

//3>Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.



package day5_1;

 class base{
	 
	  base()
	  {
		  
		  System.out.println("inside base cons");
	 
	  }
	 
 }
 class sub extends base{
	 
	 sub()
	 {
		 
		  System.out.println("inside  sub cons");
		 
	 }
	  
 }
class sub1 extends base{
	
	sub1()
	{
		
		 System.out.println("inside  sub1 cons");
	}
	
}
class sub2 extends base{
	
	sub2()
	{
		
		 System.out.println("inside  sub2 cons");
	}
	
}



public class Demo {

	public static void main(String[] args) {
 
		   sub2 s= new sub2();
		   sub1 s1= new sub1();
		   sub s2= new sub();
		 
		
	}

}
..............................................................................


// 4>Create a class "Top1" with "disp1()" method.
//From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
//Now show how will u achieve dynamic polymorphism.


package day5_1;

class Top1{
	

	public void disp1() {
		
		System.out.println("inside disp1");
	}
	
	
}

class Bottom1 extends Top1{
	
	
		public void disp1() {
			
			System.out.println("inside disp1 of Bottom1");
		}
	
}
class Bottom2 extends Top1{
	
	  public void disp1() {
			
			System.out.println("inside disp1 of Bottom2");
		}
}
class Bottom3 extends Top1{
	
	  public void disp1()
	   {
			
			System.out.println("inside disp1 of Bottom3");
		}
	
}

public class Demo {

	public static void main(String[] args) {
 
		 Top1 t1= new Bottom1(); // upcasting
		 Top1 t2= new Bottom2();
		 Top1 t3= new Bottom3();
		 t1.disp1();
		 t2.disp1();
		 t3.disp1();
		 
		 
		
	}
}

..............................................................................



package day5_1;

//5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
//create an array of Shape having 3 elements.
//store child objects into this array . and call
//their draw function.

abstract class Shape{
	
	void draw();
		
	
}
class Triangle extends Shape {
	
	
	void draw() {
		
		System.out.println("draw traiangle ");
	}
	
}

class Polygon extends Shape {
	
	
	void draw() {
		
		System.out.println("draw Polygon ");
	}
	
}
class Circle extends Shape {
	
	
	void draw() {
		
		System.out.println("draw Circle ");
	}
	
}





public class Demo {

	public static void main(String[] args) {
 
		  Shape arr[]= new Shape[3];
		  arr[0]= new Triangle();
		  arr[1]=new Polygon();
		  arr[2]= new Circle();
		 
		    for(int i=0;i<arr.length;i++) {
		    	arr[i].draw();
		    	
		    }
		 
		
	}
}

.....................................................................
6>
//6) Define interface "A" with "disp1()" method.
//Derive from "A", interface "B" with "disp2" method.
//Derive class "C" , from "B".
//Instantiate class "C" and call its members as well as derived from parent interfaces.

package day5_1;

interface A{
	
	void disp1() ;
		
} 
interface B extends  A{
	int a=10;
	
	 void disp2(); 
		
	
}
class C implements B{
	
	public void disp1() {
		
		System.out.println("inside disp1 of class C ");
		
	} 
	public void disp2() {
		
		System.out.println("inside disp2 of class C ");
	}
}


public class Demo {

	public static void main(String[] args) {
 
		 C c1= new C();
		 c1.disp1();
		 c1.disp2();
		System.out.println( c1.a);
		
		
}
}
..............................................
//7) Define class "Parent1" with some data.
//Define interface "Parent2" with some methods.
//Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.

package day5_1;

class Parent1{
	
	int a;
	
	Parent1(){
		
		a=10;
		System.out.println("parent1 no args cons");
	}
	
}

interface Parent2{
	
	void disp1();
	void disp2();
	
}

class Child extends Parent1 implements Parent2{
	
	public void disp1() {
		
		System.out.println("inside child disp1");
	}
	public void disp2() {
		
		System.out.println("inside child disp2");
	}
	
	
}

public class Demo {

	public static void main(String[] args) {
 
	Child ch= new Child();
	ch.disp1();
	ch.disp2();
	
		
}
}
.......................................................................
//8) Define a class "base1" with only parameterized constructor.
//Derive a class "sub1" from "base1". This class should have following constructors
//	a) Default
//	b) one parameter
//	c) two parameter
//Now try to instantiate "sub1" , using any of the above mentioned constructors.

package day5_1;


class Base1{
	
	Base1(){
		
		System.out.println("base1 no args cons");
	}
	
}

class Sub1 extends Base1{
	int num;
	Sub1(){
		
		System.out.println("inside no arg Sub1");
	}
	Sub1(int k){
		
		this.num=k;
		System.out.println("inside one arg Sub1");
	}
	Sub1(int b,int c){
		
		this.num=b;
		this.num=c;
		System.out.println("inside two arg Sub1");
	}
}



public class Demo {

	public static void main(String[] args) {
 
		 Sub1 s= new Sub1();
		 Sub1 s1= new Sub1(10);
		 Sub1 s2= new Sub1(10,20);
		 
		

	
		
}
}
...........................................................................
9>//9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
//Now Define one more class 
//public class Demo with main function.
//In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.
//


package day5_1;


interface Game{
	
	void play();
	
}
class Cricket implements Game{
	
	public void play() {
		
		System.out.println("play Cricket");
	}
}
class Football implements Game{
	public void play() {
		
		System.out.println("Play Football");
	}
	
}
class Tennis implements Game{
  public void play() {
	  System.out.println("Play Tennis");
		
	}
	
}


public class Demo {

	static void perform(Game g) {
		
		g.play();
		
	}
	
	
	public static void main(String[] args) {
		perform(new Cricket());
		perform(new Football());
		perform(new Tennis());
		
		

	
		
}
}







